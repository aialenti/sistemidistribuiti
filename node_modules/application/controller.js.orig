/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 var model = require('./model.js');
 var crypto = require('./libs/md5.js');
 var bcrypt = require('bcrypt');

//callback da eseguire dopo la query
callback = function(rows){
  console.log(rows);
}

//esecuzione della query
//model.executeQuery(query,callback);

var getIndex = function(req,res){
  //res.render('index');
  res.sendfile('views/matchview.html');
}

// Creazione nuovo utente
var createNewUser = function(req,res){
  model.req = req;
  var query;
  var username = model.getParam('username');
  var email = model.getParam('email');
  var password = model.getParam('password');
  
  // Critta la password con bcrypt
  var hashedpassword = bcrypt.hashSync(password, 10);

  var data = new Object();
  data.table = 'users';

  data.values = [
  ['username',username],
  ['email',email],
  ['password',hashedpassword]
  ];

  query = model.insertQuery(data);
  // Esegue la query e porta alla schermata di login (soluzione temporanea)
  model.executeQuery(query, function(){
    res.render('login');
  });
}

var doLogin = function(req, socket) {
  model.req = req;
  var query;
  var username = req.user;
  var password = req.password;

  console.log(username + "---" + password);


  var data = new Object();
  data.from = 'users';

  data.select = ['*'];

  data.where = [
  ['username','=', username],
  ];
  query = model.searchQuery(data);
  console.log("QUERY: " + query);
  var user;
  model.executeQuery(query, function(data){
    var errormessage;
    user = data;
    console.log(data);
    console.log(user);
    if (data.length != 0) {
      console.log('user presente ' + user[0].username);
      if (bcrypt.compareSync(password, user[0].password))
        authorizeLogin();
      else {
        errormessage = "Wrong password!"
        console.log(errormessage);
        socket.emit('loginerror',  errormessage);
      }
    }
    else {
      errormessage = "User does not exist!";
      console.log(errormessage);
      socket.emit('loginerror', errormessage);
    }
  });
/*
   * Commento: una volta effettuata la query, si analizzano i risultati
   * (funzione di callback): se non si ottiene niente (data.length === 0)
   * vuol dire che non c'è un user con quell'username nel DB;
   * altrimenti, si controlla la correttezza della password con bcrypt
   * e si conferma o meno la validità del login (il messaggio passa alla pagina per il rendering)
   */
}

var authorizeLogin = function(req, res) {
  //TO-DO create session, store session data, redirect to admin page
  console.log("LOGGING YOU IN");
}

var manageMatch = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var currentDay = model.getParam("day");
  var home_team = model.getParam('home_team');
  var away_team = model.getParam('away_team');
  var matchdays_flag = model.getParam('matchdays_flag');
  var matchdays_number = model.getParam('matchdays_number');
  var matchdays_season = model.getParam('matchdays_season');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "matches";
  
  console.log(action)
  switch(action){
    case "create":
    data.values = [
    ["home_team",home_team],
    ["away_team",away_team],
    ["matchdays_flag",matchdays_flag],
    ["matchdays_number",matchdays_number],
    ["matchdays_season",matchdays_season]
    ]
    query = model.insertQuery(data);
    break;
    case "delete":
    data.where = [
    ["id","=",id]
    ];
    query = model.deleteQuery(data);
    break;
    case "edit":
    data.values = [
    ["home_team",home_team],
    ["away_team",away_team],
    ["matchdays_flag",matchdays_flag],
    ["matchdays_number",matchdays_number],
    ["matchdays_season",matchdays_season]
    ]
    data.where = [
    ["id","=",id]
    ];
    query = model.updateQuery(data);
    break;
    default:
    break;
  }
  model.executeQuery(query,function(error, rows, cols){

  });

}

var manageScore = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var time = model.getParam('time');
  var player = model.getParam('player');
  var match_id = model.getParam('match_id');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "scores";
  
  switch(action){
    case "create":
    data.values = [
    ["flag",flag],
    ["time",time],
    ["player",player],
    ["match_id",match_id]
    ]
    query = model.insertQuery(data);
    break;
    case "delete":
    data.where = [
    ["id","=",id]
    ];
    query = model.deleteQuery(data);
    break;
    case "edit":
    data.values = [
    ["flag",flag],
    ["time",time],
    ["player",player],
    ["match_id",match_id]
    ]
    data.where = [
    ["id","=",id]
    ];
    query = model.updateQuery(data);
    break;
    default:
    break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}

var manageMatchDay = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var number = model.getParam('number');
  var season = model.getParam('season');
  
  var new_flag = model.getParam("new_flag");
  var new_number = model.getParam('new_number');
  var new_season = model.getParam('new_season');
  
  var data = new Object();
  data.table = "matchdays";
  switch(action){
    case "create":
    data.values = [
    ["flag",flag],
    ["number",number],
    ["season",season]
    ]
    query = model.insertQuery(data);
    break;
    case "delete":
    data.where = [
    ["number","=",number],
    ["season","=",season],
    ["flag","=",flag]
    ];
    query = model.deleteQuery(data);
    break;
    case "edit":
    data.values = [
    ["number","=",new_number],
    ["season","=",new_season],
    ["flag","=",new_flag]
    ];
    data.where = [
    ["number","=",number],
    ["season","=",season],
    ["flag","=",flag]
    ];
    query = model.updateQuery(data);
    break;
    default:
    break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}



var getList = function(req,socket){
  var query = "";
  switch (req.list) {
    case "championship":
      var data = new Object;
      data.select = ["*"];
      data.from = "teams";
      data.where = [];
      query = model.searchQuery(data);
      if(query != "")
        model.executeQuery(query,function(rows,error,cols){
          var ret = new Object;
          ret.rows = rows;
          ret.table = "teams";
          socket.emit("hereYourList",ret);
        });
      data.from = "matchdays";
      data.options = "group by season";
      query = model.searchQuery(data);
      if(query != "")
        model.executeQuery(query,function(rows,error,cols){
          var ret = new Object;
          ret.rows = rows;
          ret.table = "matchdays";
          socket.emit("hereYourList",ret);
        });
      break;
    default:
      break;
  }
  
}

var manageTeam = function(req,socket) {
  var query;
  var action = req.action;
  var id = req.id;
  var name = req.name;
  
  var data = new Object();
  data.table = "teams";
  
  console.log(action)
  switch(action){
    case "create":
<<<<<<< HEAD
    data.values = [
    ["name",name]
    ]
    query = model.insertQuery(data);
    break;
    case "delete":
    data.where = [
    ["id","=",id]
    ];
    query = model.deleteQuery(data);
    break;
    case "edit":
    data.values = [
    ["name",name]
    ];
    data.where = [
    ["id","=",id]
    ];
    query = model.updateQuery(data);
    break;
=======
      data.values = [
      ["name",name]
      ]
      query = model.insertQuery(data);
      model.executeQuery(query,function(error, rows, cols){
        socket.emit("teamAdded")
      });
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      model.executeQuery(query,function(error, rows, cols){
        socket.emit("teamRemoved");
      });
      break;
    case "edit":
      data.values = [
      ["name",name]
      ];
      data.where = [
      ["id","=",id]
      ];
      
      query = model.updateQuery(data);
      break;
>>>>>>> 01fdddc9a74be4b544780f558c6de9ed9b99d718
    default:
    break;
  }
<<<<<<< HEAD
  model.executeQuery(query,function(error, rows, cols){

  });

}

var getList = function(req,socket){
  switch (req.list) {
    case "championship":
    var data = new Object;
    data.select = ["*"];
    data.table = "teams";
    data.where = [];
    var query;
    query = model.searchQuery(data);
    break;
    default:
    break;
=======
  

}

var createSeason = function(req,socket){
  var list = req.list;
  var query = "";
  var data = new Object;
  var new_season = req.year;    
  data.values = new Array();
  query = "";
  //creazione delle giornate
  for(var i=0;i<list.length/2;i++){
    data.table = "matchdays"
    data.values[i] = [
    ["season",new_season+""],
    ["number",""+(i+1)],
    ["flag","0"]
    ]
>>>>>>> 01fdddc9a74be4b544780f558c6de9ed9b99d718
  }
  query = model.multiInsertQuery(data);
  model.executeQuery(query,function(rows,error,cols){
    query = "";
    data.table = "matches";
    data.values = new Array();
    var p=0;
    for(var i=0;i<list.length;i++)
      for(var j=0;j<list.length;j++){
        if(i!=j){
          data.values[p] = [
          ["home_team",""+list[i]],
          ["away_team",""+list[j]],
          ["matchdays_season",""+new_season]
          ];
          p++;
        }
      }
    query = model.multiInsertQuery(data);
    model.executeQuery(query,function(rows,error,cols){
      socket.emit("seasonCreated",rows);
    });
  });
}

<<<<<<< HEAD
var seasonYear = function(req,socket){

}
var getHowManyTeams = function(req,socket){
  var query = model.countEntries("teams");
  console.log(query)
=======
var getChampionshipModalData = function(req,socket){
  var data = new Object;
  data.select = ["*"];
  data.from = "teams";
  data.where = [];
  var query = model.searchQuery(data);
>>>>>>> 01fdddc9a74be4b544780f558c6de9ed9b99d718
  model.executeQuery(query,function(rows,error,cols){
    socket.emit("hereChampionshipModalData",rows);
  });
}


var getAdminPage = function(req,res){
  model.req = req;
  res.sendfile('views/admin.html');
}

exports.createSeason = createSeason;
exports.getChampionshipModalData = getChampionshipModalData;
exports.getList = getList;
exports.getAdminPage = getAdminPage;
exports.getIndex = getIndex;
exports.doLogin = doLogin;
exports.manageMatch = manageMatch;
exports.manageMatchDay = manageMatchDay;
exports.manageScore = manageScore;
exports.manageTeam = manageTeam;
exports.createNewUser = createNewUser;
