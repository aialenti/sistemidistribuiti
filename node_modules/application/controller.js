/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

var model = require('./model.js');
var crypto = require('./libs/md5.js');
//var bcrypt = require('bcrypt');

//callback da eseguire dopo la query
callback = function(rows){
  console.log(rows);
}

//esecuzione della query
//model.executeQuery(query,callback);

var getIndex = function(req,res){
  //res.render('index');
  res.sendfile('views/matchview.html');
}

// Creazione nuovo utente
var createNewUser = function(req,res){
  model.req = req;
  var query;
  var username = model.getParam('username');
  var email = model.getParam('email');
  var password = model.getParam('password');
  
  // Critta la password con bcrypt
  var hashedpassword = bcrypt.hashSync(password, 10);

  var data = new Object();
  data.table = 'users';

  data.values = [
  ['username',username],
  ['email',email],
  ['password',hashedpassword]
  ];

  query = model.insertQuery(data);
  // Esegue la query e porta alla schermata di login (soluzione temporanea)
  model.executeQuery(query, function(){
    res.render('login');
  });
}

var doLogin = function(req, res) {
  model.req = req;
  var query;
  var username = model.getParam('user');
  var password = model.getParam('password');

  var data = new Object();
  data.table = 'users';

  data.select = ['*'];

  data.where = [
  ['username',username],
  ];
  query = model.searchQuery(data);
  console.log("QUERY: " + query);
  var user;
  model.executeQuery(query, function(data){
    user = data;
    console.log(data);
    console.log(user);
    if (data.length != 0) {
      console.log('user presente ' + user[0].username);
      if (bcrypt.compareSync(password, user[0].password))
        res.render('login', {
          errormessage: 'ok'
        });
      else
        res.render('login', {
          errormessage: 'Wrong password!'
        })
    }
    else {
      console.log('user non presente');
      res.render('login', {
        errormessage: 'User does not exist!'
      });
    }
  });
/*
 * Commento: una volta effettuata la query, si analizzano i risultati
 * (funzione di callback): se non si ottiene niente (data.length === 0)
 * vuol dire che non c'è un user con quell'username nel DB;
 * altrimenti, si controlla la correttezza della password con bcrypt
 * e si conferma o meno la validità del login (il messaggio passa alla pagina per il rendering)
 */
}

var manageMatch = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var currentDay = model.getParam("day");
  var home_team = model.getParam('home_team');
  var away_team = model.getParam('away_team');
  var matchdays_flag = model.getParam('matchdays_flag');
  var matchdays_number = model.getParam('matchdays_number');
  var matchdays_season = model.getParam('matchdays_season');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "matches";
  
  console.log(action)
  switch(action){
    case "create":
      data.values = [
      ["home_team",home_team],
      ["away_team",away_team],
      ["matchdays_flag",matchdays_flag],
      ["matchdays_number",matchdays_number],
      ["matchdays_season",matchdays_season]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["home_team",home_team],
      ["away_team",away_team],
      ["matchdays_flag",matchdays_flag],
      ["matchdays_number",matchdays_number],
      ["matchdays_season",matchdays_season]
      ]
      data.where = [
      ["id","=",id]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    
    });

}

var manageScore = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var time = model.getParam('time');
  var player = model.getParam('player');
  var match_id = model.getParam('match_id');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "scores";
  
  switch(action){
    case "create":
      data.values = [
      ["flag",flag],
      ["time",time],
      ["player",player],
      ["match_id",match_id]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["flag",flag],
      ["time",time],
      ["player",player],
      ["match_id",match_id]
      ]
      data.where = [
      ["id","=",id]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}

var manageMatchDay = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var number = model.getParam('number');
  var season = model.getParam('season');
  
  var new_flag = model.getParam("new_flag");
  var new_number = model.getParam('new_number');
  var new_season = model.getParam('new_season');
  
  var data = new Object();
  data.table = "matchdays";
  
  console.log(action)
  switch(action){
    case "create":
      data.values = [
      ["flag",flag],
      ["number",number],
      ["season",season]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["number","=",number],
      ["season","=",season],
      ["flag","=",flag]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["number","=",new_number],
      ["season","=",new_season],
      ["flag","=",new_flag]
      ];
      data.where = [
      ["number","=",number],
      ["season","=",season],
      ["flag","=",flag]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}

var manageTeam = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var id = model.getParam('id');
  var name = model.getParam('name');
  
  var data = new Object();
  data.table = "teams";
  
  console.log(action)
  switch(action){
    case "create":
      data.values = [
      ["name",name]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["name",name]
      ];
      data.where = [
      ["id","=",id]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    
    });

}

var getList = function(req,socket){
  switch (req.list) {
    case "championship":
      var data = new Object;
      data.select = ["*"];
      data.table = "teams";
      data.where = [];
      var query;
      query = model.searchQuery(data);
      break;
    default:
      break;
  }
  
  model.executeQuery(query,function(rows,error,cols){
    var ret = new Object;
    ret.rows = rows;
    ret.table = req.list;
    socket.emit("hereYourList",ret);
  });
  
}

var seasonYear = function(req,socket){
  
}
var getHowManyTeams = function(req,socket){
  var query = model.countEntries("teams");
  console.log(query)
  model.executeQuery(query,function(rows,error,cols){
    socket.emit("hereHowManyTeams",rows);
  });
}


var getAdminPage = function(req,res){
  model.req = req;
  res.sendfile('views/admin.html');
}

exports.getHowManyTeams = getHowManyTeams;
exports.getList = getList;
exports.getAdminPage = getAdminPage;
exports.getIndex = getIndex;
exports.doLogin = doLogin;
exports.manageMatch = manageMatch;
exports.manageMatchDay = manageMatchDay;
exports.manageScore = manageScore;
exports.manageTeam = manageTeam;
exports.createNewUser = createNewUser;