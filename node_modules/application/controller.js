/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

var model = require('./model.js');
var crypto = require('./libs/md5.js');
var bcrypt = require('bcrypt');

var authorized = [];

//callback da eseguire dopo la query
callback = function(rows){
  console.log(rows);
}

//esecuzione della query
//model.executeQuery(query,callback);

var getIndex = function(req,res){
  //res.render('index');
  res.sendfile('views/matchview.html');
}

// Creazione nuovo utente
var createNewUser = function(req,res){
  model.req = req;
  var query;
  var username = model.getParam('username');
  var email = model.getParam('email');
  var password = model.getParam('password');
  
  // Critta la password con bcrypt
  var hashedpassword = bcrypt.hashSync(password, 10);
  
  var data = new Object();
  data.table = 'users';

  data.values = [
  ['username',username],
  ['email',email],
  ['password',hashedpassword]
  ];

  query = model.insertQuery(data);
  // Esegue la query e porta alla schermata di login (soluzione temporanea)
  model.executeQuery(query, function(){
    res.render('login');
  });
}

var doLogin = function(data, socket) {
  var query;
  var username = data.user;
  var password = data.password;
  var id = data.sessionid.express_sid;

  var data = new Object();
  data.from = 'users';

  data.select = ['*'];

  data.where = [
  ['username','=', username],
  ];
  query = model.searchQuery(data);
  console.log("QUERY: " + query);
  var user;
  model.executeQuery(query, function(data){
    var errormessage;
    user = data;
    console.log(data);
    if (data.length != 0) {
      console.log('user presente ' + user[0].username);
      if (bcrypt.compareSync(password, user[0].password)) {
        errormessage = "ok";
        console.log(errormessage);
        authorized.push(id);
        console.log(authorized);
        socket.emit('successfullogin', errormessage);
      }
      else {
        errormessage = "Wrong password!"
        console.log(errormessage);
        socket.emit('loginerror',  errormessage);
      }
    }
    else {
      errormessage = "User does not exist!";
      console.log(errormessage);
      socket.emit('loginerror', errormessage);
    }
  });
/*
   * Commento: una volta effettuata la query, si analizzano i risultati
   * (funzione di callback): se non si ottiene niente (data.length === 0)
   * vuol dire che non c'è un user con quell'username nel DB;
   * altrimenti, si controlla la correttezza della password con bcrypt
   * e si conferma o meno la validità del login (il messaggio passa alla pagina per il rendering)
   */
}

var authorize = function(sid) {
  var auth = false;
  console.log("AUTHORIZED SIDs:   " + authorized);
  if (authorized != undefined)
    for (var i = 0;i < authorized.length; i++) {
      console.log("COMPARING:::["+i+"]:::" + authorized[i]);
      if (sid===authorized[i]) {
        auth = true;
        console.log("FOUND ONE");
      }
    }
  return auth;
}

var manageMatch = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var currentDay = model.getParam("day");
  var home_team = model.getParam('home_team');
  var away_team = model.getParam('away_team');
  var matchdays_flag = model.getParam('matchdays_flag');
  var matchdays_number = model.getParam('matchdays_number');
  var matchdays_season = model.getParam('matchdays_season');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "matches";
  
  console.log(action)
  switch(action){
    case "create":
      data.values = [
      ["home_team",home_team],
      ["away_team",away_team],
      ["matchdays_flag",matchdays_flag],
      ["matchdays_number",matchdays_number],
      ["matchdays_season",matchdays_season]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["home_team",home_team],
      ["away_team",away_team],
      ["matchdays_flag",matchdays_flag],
      ["matchdays_number",matchdays_number],
      ["matchdays_season",matchdays_season]
      ]
      data.where = [
      ["id","=",id]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    
    });

}

var manageScore = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var time = model.getParam('time');
  var player = model.getParam('player');
  var match_id = model.getParam('match_id');
  var id = model.getParam('id');
  
  var data = new Object();
  data.table = "scores";
  
  switch(action){
    case "create":
      data.values = [
      ["flag",flag],
      ["time",time],
      ["player",player],
      ["match_id",match_id]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["flag",flag],
      ["time",time],
      ["player",player],
      ["match_id",match_id]
      ]
      data.where = [
      ["id","=",id]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}

var manageMatchDay = function(req, res) {
  model.req = req; //in questo modo non devo inserire req in tutte le chiamate a getParam;
  var query;
  var action = model.getParam("action");
  var flag = model.getParam('flag');
  var number = model.getParam('number');
  var season = model.getParam('season');
  
  var new_flag = model.getParam("new_flag");
  var new_number = model.getParam('new_number');
  var new_season = model.getParam('new_season');
  
  var data = new Object();
  data.table = "matchdays";
  switch(action){
    case "create":
      data.values = [
      ["flag",flag],
      ["number",number],
      ["season",season]
      ]
      query = model.insertQuery(data);
      break;
    case "delete":
      data.where = [
      ["number","=",number],
      ["season","=",season],
      ["flag","=",flag]
      ];
      query = model.deleteQuery(data);
      break;
    case "edit":
      data.values = [
      ["number","=",new_number],
      ["season","=",new_season],
      ["flag","=",new_flag]
      ];
      data.where = [
      ["number","=",number],
      ["season","=",season],
      ["flag","=",flag]
      ];
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  model.executeQuery(query,function(error, rows, cols){
    console.log("ok")
  });

}



var getList = function(req,socket){
  var query = "";
  switch (req.list) {
    case "championship":
      var data = new Object;
      data.select = ["*"];
      data.from = "teams";
      data.where = [];
      query = model.searchQuery(data);
      if(query != "")
        model.executeQuery(query,function(rows,error,cols){
          var ret = new Object;
          ret.rows = rows;
          ret.table = "teams";
          socket.emit("hereYourList",ret);
        });
      data.from = "matchdays";
      data.options = "group by season";
      query = model.searchQuery(data);
      if(query != "")
        model.executeQuery(query,function(rows,error,cols){
          var ret = new Object;
          ret.rows = rows;
          ret.table = "matchdays";
          socket.emit("hereYourList",ret);
        });
      break;
    default:
      break;
  }
  
}

var manageTeam = function(req,socket) {
  var query;
  var action = req.action;
  var id = req.id;
  var name = req.name;
  
  var data = new Object();
  data.table = "teams";
  
  console.log(action)
  switch(action){
    case "create":
      data.values = [
      ["name",name]
      ]
      query = model.insertQuery(data);
      model.executeQuery(query,function(error, rows, cols){
        socket.emit("teamAdded")
      });
      break;
    case "delete":
      data.where = [
      ["id","=",id]
      ];
      query = model.deleteQuery(data);
      model.executeQuery(query,function(error, rows, cols){
        socket.emit("teamRemoved");
      });
      break;
    case "edit":
      data.values = [
      ["name",name]
      ];
      data.where = [
      ["id","=",id]
      ];
      
      query = model.updateQuery(data);
      break;
    default:
      break;
  }
  

}

var createSeason = function(req,socket){
  var list = req.list;
  var arrSquadre = list;
  var query = "";
  var data = new Object;
  var new_season = req.year;    
  data.values = new Array();
  query = "";
  var giornate = arrSquadre.length;
  if(arrSquadre.length%2==0)
    giornate = arrSquadre.length-1;
  //creazione delle giornate
  for(var i=0;i<giornate;i++){
    if(i%2==0)
      flag="0";
    else flag ="1";
    data.table = "matchdays"
    data.values[i] = [
    ["season",new_season+""],
    ["number",""+i],
    ["flag",flag]
    ]
  }
  query = model.multiInsertQuery(data);
  console.log(query);
  model.executeQuery(query,function(rows,error,cols){
    query = "";
    data.table = "matches";
    data.values = new Array();
    var p=0;
    var ht,at,flag;
    // Aggiunta di una "squadra" di comodo se sono dispari 
    (arrSquadre.length % 2 ) && arrSquadre.push('0');
    
    for (var i = 0; i < giornate; i++) {
      for (var j = 0; j < arrSquadre.length/2 ; j++) {
        // alterna le partite in casa e fuori
        if(i%2==0){
          ht = arrSquadre[arrSquadre.length -j -1];
          at= arrSquadre[j];
          flag = "0";
        }
        else{
          ht = arrSquadre[j];
          at = arrSquadre[arrSquadre.length -j -1];
          flag = "1";
        }
        data.values[p] = [
        ["home_team",""+ht],
        ["away_team",""+at],
        ["matchdays_season",""+new_season],
        ["matchdays_number",i+""],
        ["matchdays_flag",flag]
        ];
        p++;
      }
      // Ultima squadra viene inserita nella posizione 1
      arrSquadre.splice(1,0,arrSquadre.pop());
          

    }
 
    query = model.multiInsertQuery(data);
    console.log(query);
    model.executeQuery(query,function(rows,error,cols){
      socket.emit("seasonCreated",rows);
    });
  });
}

var getChampionshipModalData = function(req,socket){
  var data = new Object;
  data.select = ["*"];
  data.from = "teams";
  data.where = [];
  var query = model.searchQuery(data);
  model.executeQuery(query,function(rows,error,cols){
    socket.emit("hereChampionshipModalData",rows);
  });
}


var getAdminPage = function(req,res){
  model.req = req;
  console.log(req.session);
  res.sendfile('views/admin.html');
}

var getSeasons = function(req,socket) {
  var query = "SELECT season FROM matchdays GROUP BY season";
  model.executeQuery(query, function(rows, error, cols) {
    console.log(rows);
    socket.emit("hereSeasonsList",rows);
  });
}

var getAllTheSeason = function(req,socket){
  
  console.log(req);
  model.req = req;
  var season = model.getParam("season");
  var query = "SELECT m.id,m.home_team, m.away_team,m.matchdays_flag,m.matchdays_number,m.matchdays_season,t.name as home_team_name,t2.name as away_team_name \n\
               FROM matches m,teams t,teams t2 \n\
               WHERE m.home_team = t.id AND m.away_team = t2.id AND m.matchdays_season='"+season+"'";
  console.log(query)
  model.executeQuery(query,function(rows,error,cols){
    socket.emit("hereAllTheSeason",rows);
    query = "SELECT m.id,m.home_team, m.away_team,m.matchdays_flag,m.matchdays_number,m.matchdays_season,t.name as home_team_name,t2.name as away_team_name,s.time,s.player,s.id as score_id  \n\
             FROM matches m,teams t,teams t2,scores s \n\
             WHERE m.id=s.match_id AND m.home_team = t.id AND m.away_team = t2.id AND m.matchdays_season='9999'";
    model.executeQuery(query,function(rows,error,cols){
      socket.emit("hereTheScores",rows);
    });
  });
  
  
}

exports.getSeasons = getSeasons;
exports.getAllTheSeason = getAllTheSeason;
exports.createSeason = createSeason;
exports.getChampionshipModalData = getChampionshipModalData;
exports.getList = getList;
exports.getAdminPage = getAdminPage;
exports.getIndex = getIndex;
exports.doLogin = doLogin;
exports.manageMatch = manageMatch;
exports.manageMatchDay = manageMatchDay;
exports.manageScore = manageScore;
exports.manageTeam = manageTeam;
exports.createNewUser = createNewUser;
exports.authorize = authorize;
