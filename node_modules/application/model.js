/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

var mysql      = require('mysql');
var errorHandling = require('./errorHandling.js')

var req = new Object;
exports.req = req;

var executeQuery = function(query,callback){
  var connection = mysql.createConnection({
    host     : 'localhost',
    user     : 'root',
    password : '',
    database : 'sistemidistribuiti',
    insecureAuth:true
  });

  connection.connect();
  connection.query(query, function(err, rows, fields) {
    var error = false;

    if (err) 
      errorHandling.handleQueryError(err);
    if(error == false)
      callback(rows);
  });
  connection.end();
  
}

var getParam = function(param) {
  if(this.req.query == undefined) 
    if(this.req[param] == undefined)
      return false
    else return this.req[param]
  var val = this.req.query[param];
  console.log(val)
  if(val == undefined)
    return false;
  else return val;
}
exports.getParam = getParam;

/**
   * @param data : 
   * var data = new Object;
   * data.select = ["username","password"];
   * data.from = "users";
   * data.where = [
   * {
   * 0: "username",
   * 1: "=",
   * 2: "andrea"
   * }
   * ];
   */
var searchQuery =  function(data){
  var query = "";
  
  //select
  var length = data.select.length;
  query += "SELECT ";
  for(i=0;i<length;i++){
    query += data.select[i]
    if(i<length-1)
      query += ", ";
    else query += " ";
  }
  //from
  query += " FROM "+ data.from;
  //where
  if(data.where != undefined){
    length = data.where.length;
    if(length != 0)
      query += " WHERE ";
    for(var i=0;i<length;i++){
      query += data.where[i][0]+data.where[i][1]+"'"+data.where[i][2]+"'";
      if(i<length-1)
        query +=" AND ";
    }
  }
  if (data.order != undefined)
    query += " order by "+ data.order;
  if (data.limit != undefined)
    query += " limit " + data.limit + " ";
  if(data.options != undefined)
    query += " "+data.options;
  return query;
}

  
var insertQuery = function(data){
  var query = "INSERT INTO "+data.table+" (";
  var length = data.values.length;
  for(var i=0;i<length;i++){
    query += data.values[i][0];
    if(i<length-1)
      query += ",";
  }
  query += ") VALUES (";
  for(var i=0;i<length;i++){
    if(data.values[i][1].match(/SELECT/))
      query += "("+data.values[i][1]+")";
    else
      query += "'"+data.values[i][1]+"'";
    if(i<length-1)
      query +=",";
  }
  query += ")";
  return query;
    
}
var multiInsertQuery = function(data){
  var query = "INSERT INTO "+data.table+" (";
  var length = data.values[0].length;
  for(var i=0;i<length;i++){
    query += data.values[0][i][0];
    if(i<length-1)
      query += ",";
  }
  query += ") VALUES ";
  for(var k=0;k<data.values.length;k++){
    query +="("
    for(var i=0;i<length;i++){
      if(data.values[k][i][1].match(/SELECT/))
        query += "("+data.values[k][i][1]+")";
      else
        query += "'"+data.values[k][i][1]+"'";
      if(i<length-1)
        query +=",";
    }
    query += ")";
    if(k+1 != data.values.length)
      query += ",";
  }
  return query;
    
}

/**
   * Crea la query per l'aggiornamento di determinati campi, in una determinata tabella
   * sotto determinate condizioni
   * @param string $table
   * @param array $valueSet i valori da aggiornare array[i]['campo'] array[i]['valore nuovo']
   * @param array $where condizioni che identificano le ennuple da aggiornare
   * @return string la query per l'update
   */
var updateQuery = function(data){
  var query = "UPDATE " + data.table + " ";
  query += "SET ";
  length = data.values.length;
  for (var i=0; i<length; i++) {
    query += data.values[i][0] + "=" + "'" + data.values[i][1] + "'";
    if (i < length - 1)
      query += ",";
    else
      query += "";
  }
  query += " WHERE ";
  length = data.where.length;
  for (var i=0; i<length; i++) {
    if (!data.where[i][1].match(/IN/))
      query += data.where[i][0] + data.where[i][1] + "'" + data.where[i][2] + "'";
    else
      query += data.where[i][0] + " " + data.where[i][1] + " " + "(" + data.where[i][2] + ")";
    if (i < length - 1)
      query += " AND ";
  }
  console.log(query)
  return query;
}
  
var deleteQuery = function(data) {
  var query = "DELETE FROM "+data.table+" WHERE ";
  for(var i=0;i<data.where.length;i++){
    if (!data.where[i][1].match(/IN/))
      query += data.where[i][0] + data.where[i][1] + "'" + data.where[i][2] + "'";
    else
      query += data.where[i][0] + data.where[i][1] + data.where[i][2];
    if (i < data.where.length - 1)
      query += " AND ";
    return query;
  }
}

var countEntries = function(table) {
  var query = "SELECT COUNT (*) as count FROM " + table;
  return query;
}


exports.countEntries = countEntries;
exports.multiInsertQuery = multiInsertQuery;
exports.deleteQuery = deleteQuery;
exports.insertQuery = insertQuery;
exports.searchQuery = searchQuery;
exports.executeQuery = executeQuery;
exports.updateQuery = updateQuery;
